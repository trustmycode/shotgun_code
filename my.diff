diff --git a/app.go b/app.go
index 81b212c..5718697 100644
--- a/app.go
+++ b/app.go
@@ -26,6 +26,7 @@
 type AppSettings struct {
 	CustomIgnoreRules string `json:"customIgnoreRules"`
 	CustomPromptRules string `json:"customPromptRules"`
+	ApiKey            string `json:"apiKey,omitempty"`
 }
 
 type App struct {
@@ -1011,6 +1012,23 @@
 	return nil
 }
 
+// SaveApiKey saves the Google AI API key to the settings file.
+func (a *App) SaveApiKey(key string) error {
+	a.settings.ApiKey = key
+	err := a.saveSettings()
+	if err != nil {
+		return fmt.Errorf("failed to save API key: %w", err)
+	}
+	runtime.LogInfo(a.ctx, "API Key saved successfully.")
+	return nil
+}
+
+// LoadApiKey loads the Google AI API key from the settings.
+func (a *App) LoadApiKey() string {
+	// Settings are loaded at startup. If the key is empty, it's either not set or couldn't be loaded.
+	return a.settings.ApiKey
+}
+
 // SetUseGitignore updates the app's setting for using .gitignore and informs the watcher.
 func (a *App) SetUseGitignore(enabled bool) error {
 	a.useGitignore = enabled
diff --git a/frontend/wailsjs/go/main/App.d.ts b/frontend/wailsjs/go/main/App.d.ts
index 5410196..4198305 100644
--- a/frontend/wailsjs/go/main/App.d.ts
+++ b/frontend/wailsjs/go/main/App.d.ts
@@ -8,11 +8,15 @@
 
 export function ListFiles(arg1:string):Promise<Array<main.FileNode>>;
 
+export function LoadApiKey():Promise<string>;
+
 export function RequestShotgunContextGeneration(arg1:string,arg2:Array<string>):Promise<void>;
 
 export function SelectDirectory():Promise<string>;
 
+export function SaveApiKey(arg1:string):Promise<void>;
+
 export function SetCustomIgnoreRules(arg1:string):Promise<void>;
 
 export function SetCustomPromptRules(arg1:string):Promise<void>;
diff --git a/frontend/wailsjs/go/main/App.js b/frontend/wailsjs/go/main/App.js
index 725807e..526027c 100644
--- a/frontend/wailsjs/go/main/App.js
+++ b/frontend/wailsjs/go/main/App.js
@@ -18,12 +18,20 @@
   return window['go']['main']['App']['ListFiles'](arg1);
 }
 
+export function LoadApiKey() {
+  return window['go']['main']['App']['LoadApiKey']();
+}
+
 export function RequestShotgunContextGeneration(arg1, arg2) {
   return window['go']['main']['App']['RequestShotgunContextGeneration'](arg1, arg2);
 }
 
 export function SelectDirectory() {
   return window['go']['main']['App']['SelectDirectory']();
+}
+
+export function SaveApiKey(arg1) {
+  return window['go']['main']['App']['SaveApiKey'](arg1);
 }
 
 export function SetCustomIgnoreRules(arg1) {
diff --git a/tasks/2025-Q3/TASK-2025-005-backend-api-key.md b/tasks/2025-Q3/TASK-2025-005-backend-api-key.md
index 109968a..7800057 100644
--- a/tasks/2025-Q3/TASK-2025-005-backend-api-key.md
+++ b/tasks/2025-Q3/TASK-2025-005-backend-api-key.md
@@ -2,15 +2,16 @@
 ---
 id: TASK-2025-005
 title: "Задача 1.1: Управление API ключом"
-status: backlog
+status: done
 priority: high
 type: feature
 estimate: 1h
 assignee: '@unassigned'
 created: 2025-09-03
-updated: 2025-09-03
+updated: 2025-09-04
 parents: [TASK-2025-004]
 arch_refs: [ARCH-BACKEND-GEMINI-PROXY]
 audit_log:
   - {date: 2025-09-03, user: "@AI-DocArchitect", action: "created with status backlog"}
+  - {date: 2025-09-04, user: "@Robotic-SSE", action: "implemented SaveApiKey and LoadApiKey; status changed to done"}
 ---
 ## Описание
 Реализовать безопасное сохранение и загрузку Google AI API ключа пользователя. Ключ должен храниться в файле конфигурации в домашней директории пользователя и не должен передаваться на фронтенд.
